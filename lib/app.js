// Generated by CoffeeScript 1.6.3
(function() {
  var GoogleStrategy, Issue, IssueSchema, User, UserSchema, app, express, findOrCreate, fs, http, io, mongoose, passport, path, routes, server, socketio, util;

  express = require('express');

  routes = require('./../routes');

  http = require('http');

  path = require('path');

  fs = require('fs');

  util = require('util');

  socketio = require('socket.io');

  mongoose = require('mongoose');

  findOrCreate = require('mongoose-findorcreate');

  passport = require('passport');

  GoogleStrategy = require('passport-google').Strategy;

  app = express();

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + './../views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(express.cookieParser());

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(express.session({
    secret: 'keyboard cat'
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, './../public')));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  server = http.createServer(app);

  io = socketio.listen(server);

  mongoose.connect('mongodb://localhost');

  IssueSchema = new mongoose.Schema({
    issue: String,
    time: Object,
    displayName: {
      type: String,
      ref: 'User'
    }
  });

  Issue = mongoose.model('Issue', IssueSchema);

  UserSchema = new mongoose.Schema({
    openId: String,
    displayName: String,
    emails: [
      {
        value: String
      }
    ]
  });

  UserSchema.plugin(findOrCreate);

  User = mongoose.model('User', UserSchema);

  passport.use(new GoogleStrategy({
    returnURL: 'http://localhost:3000/auth/google/return',
    realm: 'http://localhost:3000'
  }, function(identifier, profile, done) {
    return User.findOrCreate({
      openId: identifier,
      displayName: profile.displayName,
      emails: [
        {
          value: profile.emails[0]['value']
        }
      ]
    }, function(err, user) {
      return done(err, user);
    });
  }));

  passport.serializeUser(function(user, done) {
    return done(null, user);
  });

  passport.deserializeUser(function(obj, done) {
    return done(null, obj);
  });

  io.sockets.on('connection', function(socket) {
    console.log('hello from your socket server');
    /*
    	on submission of issue, package into a new object
    	that contains username, userID, issue, time, begin clock,
    	category, then send it over to the teachers side
    */

    socket.on('newIssue', function(newIssue) {
      var issue;
      console.log(newIssue);
      console.log('socket', current_user);
      issue = new Issue({
        issue: newIssue,
        time: new Date()
      });
      issue.save();
      console.log('issue saved');
    });
  });

  app.get('/', function(req, res) {
    return res.render('login', {
      user: req.user
    });
  });

  app.get('/student', function(req, res) {
    var current_user;
    current_user = req.user;
    return res.render('index', {
      user: req.user
    });
  });

  app.get('/auth/google', passport.authenticate('google'));

  app.get('/auth/google/return', passport.authenticate('google', {
    session: true,
    successRedirect: '/student',
    failureRedirect: '/'
  }));

  app.get('/teacher', function(req, res) {
    return res.render('teacher');
  });

  app.post('/help-request', function(req, res) {});

  server.listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

}).call(this);
