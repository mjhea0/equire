// Generated by CoffeeScript 1.6.3
(function() {
  var GoogleStrategy, Issue, IssueSchema, User, UserSchema, app, db, express, fs, http, io, moment, mongoose, passport, path, routes, server, socketio, util;

  express = require('express');

  routes = require('./../routes');

  http = require('http');

  path = require('path');

  fs = require('fs');

  util = require('util');

  socketio = require('socket.io');

  mongoose = require('mongoose');

  moment = require('moment');

  passport = require('passport');

  GoogleStrategy = require('passport-google').Strategy;

  app = express();

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + './../views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(express.cookieParser());

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(express.session({
    secret: 'keyboard cat'
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, './../public')));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  server = http.createServer(app);

  io = socketio.listen(server);

  mongoose.connect('mongodb://localhost');

  db = mongoose.connection;

  db.once('open', function() {
    return console.log('alive');
  });

  moment().format();

  IssueSchema = new mongoose.Schema({
    issue: String,
    username: String,
    displayName: String,
    lesson: String,
    date: Object,
    timeStamp: Object,
    time: Object,
    totalWait: Object,
    isComplete: Boolean,
    comment: String
  });

  Issue = mongoose.model('Issue', IssueSchema);

  UserSchema = new mongoose.Schema({
    _id: {
      type: String,
      required: true
    },
    openId: String,
    displayName: String,
    emails: String
  });

  User = mongoose.model('User', UserSchema);

  passport.use(new GoogleStrategy({
    returnURL: 'http://localhost:3000/auth/google/return',
    realm: 'http://localhost:3000'
  }, function(identifier, profile, done) {
    console.log('email', profile.emails[0]['value']);
    return User.find({
      _id: profile.emails[0]['value']
    }, function(err, user) {
      done(err, user[0]);
      console.log('uu', user[0]);
      if (user.length === 0) {
        User.create({
          openId: identifier,
          _id: profile.emails[0]['value'],
          displayName: profile.displayName,
          emails: profile.emails[0]['value']
        }, function(err, user) {
          done(err, user[0]);
        });
        return;
      }
    });
  }));

  passport.serializeUser(function(user, done) {
    return done(null, user);
  });

  passport.deserializeUser(function(obj, done) {
    return done(null, obj);
  });

  app.get('/auth/google', passport.authenticate('google'));

  app.get('/auth/google/return', passport.authenticate('google', {
    session: true,
    successRedirect: '/student',
    failureRedirect: '/'
  }));

  io.sockets.on('connection', function(socket) {
    console.log('hello from your socket server');
    socket.on('issueObj', function(issueObj) {
      var current_time, date, issue, timeStamp;
      date = moment().format('L');
      timeStamp = moment().format('X');
      current_time = moment().format('lll');
      issue = new Issue({
        issue: issueObj.newIssue,
        username: issueObj.username,
        displayName: issueObj.displayName,
        date: date,
        timeStamp: timeStamp,
        time: current_time,
        isComplete: false,
        comment: 'None'
      });
      issue.save();
      return io.sockets.emit('issue', issue);
    });
    socket.on('issueEditObj', function(issueEditObj) {
      Issue.findByIdAndUpdate(issueEditObj.issueId, {
        issue: issueEditObj.issue
      }, function(err, issue) {
        if (err) {
          return console.log('ERROR!');
        } else {
          return console.log('Edited and Updated!');
        }
      });
      return io.sockets.emit('issueEditObj', issueEditObj);
    });
    socket.on('completeObj', function(completeObj) {
      Issue.findByIdAndUpdate(completeObj.issueId, {
        totalWait: completeObj.totalWait,
        isComplete: completeObj.isComplete,
        comment: completeObj.comment
      }, function(err, issue) {
        if (err) {
          return console.log('ERROR!');
        } else {
          return console.log('Completed and Updated!');
        }
      });
      return io.sockets.emit('completeObj', completeObj);
    });
    return socket.on('lessonUpdate', function(lessonUpdate) {
      return Issue.update({
        date: lessonUpdate.date
      }, {
        lesson: lessonUpdate.lesson
      }, function(err, numberAffected, raw) {
        if (err) {
          console.log('ERROR');
        } else {

        }
        console.log('The number of updated docs was ', numberAffected);
        return console.log('The raw response from Mongo was ', raw);
      });
    });
  });

  app.get('/', function(req, res) {
    return res.render('login', {
      user: req.user
    });
  });

  /*
  Student Routing
  */


  app.get('/student', function(req, res) {
    return res.render('student', {
      user: req.user
    });
  });

  app.get('/currentrequests', function(req, res) {
    return res.render('currentrequests', {
      user: req.user
    });
  });

  app.get('/currReq', function(req, res) {
    var currUser;
    currUser = req.user._id;
    return Issue.find({
      username: currUser,
      isComplete: false
    }, function(err, issue) {
      if (err) {
        return console.log('ERROR');
      } else {
        return res.send(issue);
      }
    });
  });

  app.get('/pastrequests', function(req, res) {
    return res.render('pastrequests', {
      user: req.user
    });
  });

  app.get('/pastReq', function(req, res) {
    var currUser;
    currUser = req.user._id;
    return Issue.find({
      username: currUser,
      isComplete: true
    }, function(err, issue) {
      if (err) {
        return console.log('ERROR');
      } else {
        return res.send(issue);
      }
    });
  });

  app.get('/logout', function(req, res) {
    req.logout();
    return res.redirect('/');
  });

  /*
  Teacher Routing
  */


  app.get('/teacher', function(req, res) {
    return res.render('teacher');
  });

  app.get('/found', function(req, res) {
    return Issue.find({
      isComplete: false
    }, function(err, issue) {
      if (err) {
        return console.log('ERROR');
      } else {
        return res.send(issue);
      }
    });
  });

  app.post('/help-request', function(req, res) {});

  server.listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

}).call(this);
